#!/usr/bin/python

import urllib2
import xml.parsers.expat
import time

# only collect downtimes if services are relevant
# 1 = CE
relevant_services = set(['1'])

downtimes = {}

in_services = False
in_descript = False

def start_element(name, attrs):
  global cur_el
  global services
  global in_services
  global in_descript
  global desc_arr

  cur_el = name
  if name == 'Services':
    services = []
    in_services = True
  elif name == 'Description' and not in_services:
    in_descript = True
    desc_arr = []
  
def char_data(data):
  global start_time
  global end_time
  global hostname

  if cur_el == 'ResourceFQDN':
    hostname = data
  elif cur_el == 'StartTime':
    start_time = time.strptime(data, "%b %d, %Y %H:%M:%S UTC")
  elif cur_el == 'EndTime':
    end_time = time.strptime(data, "%b %d, %Y %H:%M:%S UTC")
  elif cur_el == 'ID' and in_services:
    services.append(data)
  elif in_descript:
    desc_arr.append(data)

def end_element(name):
  global in_services
  global in_descript
  global descript

  if name == 'Downtime':
    relevant = False
    for s in services:
      if s in relevant_services:
        relevant = True
        break

    if relevant:
      if hostname not in downtimes:
        downtimes[hostname] = []
      downtimes[hostname].append({'start': start_time, 'end': end_time, 'desc': descript})

  elif name == 'Services':
    in_services = False
  elif name == 'Description' and not in_services:
    in_descript = False
    descript = "".join(desc_arr)
    
url = 'http://myosg.grid.iu.edu/rgdowntime/xml?summary_attrs_showservice=on&summary_attrs_showrsvstatus=on&summary_attrs_showfqdn=on&gip_status_attrs_showtestresults=on&downtime_attrs_showpast=&account_type=cumulative_hours&ce_account_type=gip_vo&se_account_type=vo_transfer_volume&bdiitree_type=total_jobs&bdii_object=service&bdii_server=is-osg&start_type=7daysago&end_type=now&all_resources=on&facility_sel[]=10009&gridtype=on&gridtype_1=on&active=on&active_value=1&disable_value=1'

#dt_xml = urllib2.urlopen(url)
dt_xml = open("down.xml")

#for line in dt_xml:
#  print line,

xmlparser = xml.parsers.expat.ParserCreate()
xmlparser.StartElementHandler = start_element
xmlparser.EndElementHandler = end_element
xmlparser.CharacterDataHandler = char_data

xmlparser.ParseFile(dt_xml)

dt_xml.close()

print downtimes
