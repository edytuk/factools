#!/usr/bin/env python

#
# Project:
#   glideinWMS

import os
import copy
import sys
STARTUP_DIR=sys.path[0]
import os.path
import string
import traceback
#sys.path.append(os.path.join(STARTUP_DIR,"lib"))
#sys.path.append(os.path.join(STARTUP_DIR,"../lib"))
# get source dir from env var until we push upstream to glideinWMS
if 'GLIDEIN_SRC_DIR' in os.environ:
    sys.path.append(os.path.join(os.environ['GLIDEIN_SRC_DIR'], "lib"))
    sys.path.append(os.path.join(os.environ['GLIDEIN_SRC_DIR'], "creation/lib"))
else:
    print '"GLIDEIN_SRC_DIR" not defined. exiting.'
    sys.exit(1)

import cgWParams
import ldapMonitor
import xmlParse
import getopt
    
################################################################################

CONF_DIR = os.path.join(STARTUP_DIR, "../../etc/add_entry")

def main(params,tmpl_params,bdii_data,bdii_srv,
         oldname,newname,
         comment,
         new_xml,
         site_name, vo_name,
         plugin, argv):

    bdii_name=bdii_data.keys()[0]
    bdii_el=bdii_data[bdii_name]

    params.data['entries'][newname]=copy.deepcopy(tmpl_params.data['entries'][oldname])

    jobmanager = bdii_el['GlueCEInfoJobManager'][0]
    if bdii_el.has_key('GlueCEInfoGRAMVersion') and bdii_el['GlueCEInfoGRAMVersion'][0]=='2.0':
        gridtype='gt2'
        gatekeeper="%s:%s/jobmanager-%s"%(bdii_el['GlueCEInfoHostName'][0],bdii_el['GlueCEInfoGatekeeperPort'][0],jobmanager)
        rsl="(queue=%s)(jobtype=single)"%bdii_el['GlueCEName'][0]
    elif bdii_el.has_key('GlueCEInfoGRAMVersion') and bdii_el['GlueCEInfoGRAMVersion'][0]=='5.0':
        gridtype='gt5'
        gatekeeper="%s:%s/jobmanager-%s"%(bdii_el['GlueCEInfoHostName'][0],bdii_el['GlueCEInfoGatekeeperPort'][0],jobmanager)
        rsl="(queue=%s)(jobtype=single)"%bdii_el['GlueCEName'][0]
    elif bdii_el.has_key('GlueCEImplementationName') and bdii_el['GlueCEImplementationName'][0]=='CREAM':
        rsl = None
        gridtype='cream'
        gatekeeper="%s:%s/cream-%s-%s"%(bdii_el['GlueCEInfoHostName'][0],bdii_el['GlueCEInfoGatekeeperPort'][0],jobmanager,bdii_el['GlueCEName'][0])
    else:
        raise RuntimeError, "Not a gt2 or cream site, aborting"

    if jobmanager == 'condor':
        work_dir = 'Condor'
    elif bdii_srv == 'is.grid.iu.edu':
        work_dir = 'OSG'
    else:
        work_dir = '.'

    # to be improved
    max_cputime = None
    if bdii_el.has_key('GlueCEPolicyMaxCPUTime'):
        max_cputime=int(bdii_el['GlueCEPolicyMaxCPUTime'][0])*60-1800
    max_walltime=int(bdii_el['GlueCEPolicyMaxWallClockTime'][0])*60-1800
    if not max_cputime is None and max_cputime < max_walltime:
        max_walltime = max_cputime

    if max_walltime > 171000:
        max_walltime = 171000
    
    entry=params.data['entries'][newname]
    entry['gridtype']=gridtype
    entry['gatekeeper']=gatekeeper
    if not rsl is None:
        entry['rsl']=rsl
    elif entry.has_key('rsl'):
        del entry['rsl']
    entry['comment']=comment
    entry['schedd_name']=None
    entry['infosys_refs']= [xmlParse.OrderedDict({'comment': None, u'type': u'BDII', u'ref': bdii_name, u'server': bdii_srv})]
    entry['attrs'][u'GLIDEIN_Max_Walltime']=xmlParse.OrderedDict({'comment': None, u'const': u'True', u'parameter': u'True', u'glidein_publish': u'False', u'value': u'%i'%max_walltime, u'publish': u'True', u'job_publish': u'False', u'type': u'int'})
    entry['attrs'][u'GLIDEIN_Site']=xmlParse.OrderedDict({'comment': None, u'const': u'True', u'glidein_publish': u'True', u'job_publish': u'True', u'parameter': u'True', u'publish': u'True', u'type': u'string', u'value': unicode(site_name)})
    entry['attrs'][u'GLIDEIN_Supported_VOs']=xmlParse.OrderedDict({'comment': None, u'const': u'True', u'glidein_publish': u'False', u'job_publish': u'False', u'parameter': u'True', u'publish': u'True', u'type': u'string', u'value': unicode(vo_name)})
    entry['work_dir'] = work_dir

    if plugin is not None:
        execfile(plugin)

    print "Added %s"%newname
    params.save_into_file(new_xml)
    print "Saved into %s"%new_xml
    return



############################################################
#
# S T A R T U P
# 
############################################################

if __name__ == '__main__':
    usage_prefix="add_new_entry [-t template] [-p plugin] xml new_xml bdii_srv bdii_id entry_name GLIDEIN_Site vo_name comment [plugin_arg]..."

    try:
        opts,args = getopt.getopt(sys.argv[1:], 'hp:t:')
    except getopt.GetoptError:
        print usage_prefix
        sys.exit(1)
    
    # for now enforce osg plugin if none specified
    plugin = "%s/osg_plugin.py" % CONF_DIR
    tmpl_fname = "%s/osg_tmpl.xml" % CONF_DIR

    for opt in opts:
        if opt[0] == '-h':
            print usage_prefix
            sys.exit(0)
        if opt[0] == '-p':
            plugin = "%s/%s" % (CONF_DIR, opt[1])
        if opt[0] == '-t':
            tmpl_fname = "%s/%s" % (CONF_DIR, opt[1])

    if len(args) < 8:
        print usage_prefix
        sys.exit(1)
    
    xml_fname=args[0]
    new_xml=args[1]
    bdii_srv=args[2]
    bdii_id=args[3]
    newname=args[4]
    site_name=args[5]
    vo_name=args[6]
    comment=args[7]

    oldname="template"
            
    try:
        tmpl_params=cgWParams.GlideinParams("",os.path.join(os.environ['GLIDEIN_SRC_DIR'],"creation/web_base"),["",tmpl_fname])
    except RuntimeError,e:
        print "Failed to load the file: %s"%tmpl_fname
        print e
        sys.exit(1)
    try:
        params=cgWParams.GlideinParams(usage_prefix,os.path.join(os.environ['GLIDEIN_SRC_DIR'],"creation/web_base"),["",xml_fname])
    except RuntimeError,e:
        print "Failed to load the file: %s"%xml_fname
        print e
        sys.exit(1)

    if not tmpl_params.data['entries'].has_key(oldname):
        print "Entry name '%s' not in XML"%oldname
        sys.exit(1)
    if params.data['entries'].has_key(newname):
        print "Entry name '%s' already in XML"%newname
        sys.exit(1)
        
    try:
        bdii_obj=ldapMonitor.BDIICEQuery(bdii_url=bdii_srv,additional_filter_str="(%s)"%bdii_id)
        bdii_data=bdii_obj.fetch()
    except Exception, e:
        print "Failed to look up DBII str (%s,%s)"%(bdii_srv,bdii_id)
        print e
        sys.exit(1)

    if len(bdii_data.keys())<1:
        print "BDII entry not found"
        sys.exit(1)

    if len(bdii_data.keys())>1:
        print "Found too many BDII entries, aborting: %s"%str(bdii_data.keys())
        sys.exit(1)

    try:
        main(params,tmpl_params,bdii_data,bdii_srv,oldname,newname,comment,new_xml,site_name, vo_name, plugin, [plugin] + args[8:])
    except RuntimeError, e:
        print params.usage()
        print ""
        print e
        sys.exit(1)

