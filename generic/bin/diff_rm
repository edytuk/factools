#!/usr/bin/env python
#
# diff_rm
#
# Similar to entry_rm, but for rundiff
#
# Usage: diff_rm entry|-l [-dir <dir>] [-printschedd] [condor_rm options]
#

import os
import sys
import xml.parsers.expat

STARTUP_DIR=sys.path[0]

#sys.path.append(os.path.join(STARTUP_DIR,"../../../"))

# get source dir from env var until we push upstream to glideinWMS
if 'GLIDEIN_SRC_DIR' in os.environ:
    sys.path.append(os.path.join(os.environ['GLIDEIN_SRC_DIR'],"../"))
else:
    print '"GLIDEIN_SRC_DIR" not defined. exiting.'
    sys.exit(1)

from glideinwms.factory import glideFactoryConfig

USAGE="Usage: diff_rm entry|-l [-dir <dir>] [-printschedd] [condor_rm options]"

# necessary globals for expat
frontends = []
frontend = 'total'
registered = 0

# builds list of frontends with 100% rundiff
def start_element(name, attrs):
    global frontends
    global frontend
    global registered
    global frontendDescript

    if name == 'frontend':
        frontend = attrs['name']
    elif name == 'total':
        frontend = name
    elif name == 'ClientMonitor' and frontend != 'total':
        registered = int(attrs['GlideTotal'])
    elif name == 'Status' and frontend != 'total':
        if int(attrs['Running']) > 0 and registered == 0:
            for user in frontendDescript.data[frontend[:-9]]['usermap'].values():
                frontends.append(user)

def print_entries(entries,want_schedd):
    print "Available entries:"
    for entry in entries.split(','):
        if not want_schedd:
            print "  %s"%entry
        else:
            jobDescript=glideFactoryConfig.JobDescript(entry)
            schedd_name=jobDescript.data['Schedd']
            print "  %-40s %-30s"%(entry,schedd_name)

def main(argv):
    global frontendDescript
    if len(argv)<2:
      print USAGE
      sys.exit(1)

    entry=argv[1]

    # Try GLIDEIN_FACTORY_DIR env var first
    if 'GLIDEIN_FACTORY_DIR' in os.environ:
        gfactory_dir=os.environ['GLIDEIN_FACTORY_DIR']
    else:
        gfactory_dir="."

    want_schedd=False
    
    # parse arguments
    alen=len(argv)
    i=2
    while (i<alen):
        ael=argv[i]
        if ael=='-dir':
            i=i+1
            gfactory_dir=argv[i]
            i=i+1
        elif ael=='-printschedd':
            i=i+1
            want_schedd=True
        else:
            break # got everything

    curdir=os.getcwd()
    try:
        os.chdir(gfactory_dir) # factoryConfig assumes the right dir
    except OSError, e:
        print "Dir '%s' not a valid factory dir: %s"%(gfactory_dir, e)
        sys.exit(1)

    try:
        glideinDescript=glideFactoryConfig.GlideinDescript()
    except IOError, e:
        print "Dir '%s' not a valid factory dir: %s"%(gfactory_dir, e)
        sys.exit(1)

    try:
        frontendDescript=glideFactoryConfig.FrontendDescript()
    except IOError, e:
        print "Dir '%s' not a valid factory dir: %s"%(gfactory_dir, e)
        sys.exit(1)

    if entry=="-l":
        print_entries(glideinDescript.data['Entries'],want_schedd)
        sys.exit(0)
    
    jobDescript=glideFactoryConfig.JobDescript(entry)
    jobAttributes=glideFactoryConfig.JobAttributes(entry)

    # get frontends with 100% rundiff from schedd_status.xml
    xml_file = open("entry_%s/monitor/schedd_status.xml" % entry)
    xmlparser = xml.parsers.expat.ParserCreate()
    xmlparser.StartElementHandler = start_element
    xmlparser.ParseFile(xml_file)
    xml_file.close()
    os.chdir(curdir)

    factory_name=glideinDescript.data['FactoryName']
    glidein_name=glideinDescript.data['GlideinName']
    schedd_name=jobDescript.data['Schedd']
    # add extra hour delta for grid unpredictability
    max_walltime=int(jobAttributes.data['GLIDEIN_Max_Walltime']) + 3600

    # case where no frontends have 100% rundiff
    if len(frontends) == 0:
        const_str='(GlideinFactory=?="%s")&&(GlideinName=?="%s")&&(GlideinEntryName=?="%s")&&(JobStatus==2)&&(CurrentTime-EnteredCurrentStatus>%s)'%(factory_name,glidein_name,entry,max_walltime)
    # if a frontend has 100% rundiff, we know all their glideins can be counted as rundiff
    else:
        front_exp_arr = ['(owner=?="%s")' % f for f in frontends]
        const_str='(GlideinFactory=?="%s")&&(GlideinName=?="%s")&&(GlideinEntryName=?="%s")&&(JobStatus==2)&&((CurrentTime-EnteredCurrentStatus>%s)||%s)'%(factory_name,glidein_name,entry,max_walltime,'||'.join(front_exp_arr))

    cr_argv=argv[i:]
    #print cr_argv

    i=0
    while (i<len(cr_argv)):
        qel=cr_argv[i]
        if qel[:3]=='-co':
            const_str='(%s)&&(%s)'%(const_str,cr_argv[i+1])
            del cr_argv[i]
            del cr_argv[i]
        else:
            i=i+1 # not an interesting one

    if want_schedd:
        print "Schedd: %s"%schedd_name
        print "Constraint: '%s'"%const_str
    
    # must flush out before forking, or any buffered content wil be lost
    sys.__stdout__.flush()
    sys.__stderr__.flush()
    os.execvp('condor_rm',['condor_rm','-name',schedd_name,'-const',const_str]+cr_argv)


if __name__ == '__main__':
    main(sys.argv)
 
